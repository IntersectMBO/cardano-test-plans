"use strict";(self.webpackChunkcardano_test_plans=self.webpackChunkcardano_test_plans||[]).push([[643],{323:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>d,toc:()=>a});var i=s(4848),l=s(8453);const n={sidebar_label:"Smart Contracts user stories",title:"Smart Contract user stories",sidebar_position:4,slug:"/smart-contracts"},r=void 0,d={id:"inventory/smart-contracts",title:"Smart Contract user stories",description:"Personas",source:"@site/docs/inventory/04-smart-contracts.md",sourceDirName:"inventory",slug:"/smart-contracts",permalink:"/cardano-test-plans/smart-contracts",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Smart Contracts user stories",title:"Smart Contract user stories",sidebar_position:4,slug:"/smart-contracts"},sidebar:"tutorialSidebar",previous:{title:"Multi Script DApp stories",permalink:"/cardano-test-plans/dapp/multi"},next:{title:"Cardano-wallet user stories",permalink:"/cardano-test-plans/cardano-wallet"}},c={},a=[{value:"Personas",id:"personas",level:2},{value:"User Story ID: CIP-85",id:"user-story-id-cip-85",level:2},{value:"Title: Sums-of-products in Plutus v3",id:"title-sums-of-products-in-plutus-v3",level:3},{value:"User Story",id:"user-story",level:3},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Link:",id:"link",level:3},{value:"User Story ID: CIP-101",id:"user-story-id-cip-101",level:2},{value:"Title: Keccak256 in Plutus v3",id:"title-keccak256-in-plutus-v3",level:3},{value:"User Story",id:"user-story-1",level:3},{value:"Functional Requirements",id:"functional-requirements-1",level:3},{value:"Link:",id:"link-1",level:3},{value:"User Story ID: PLT.001",id:"user-story-id-plt001",level:2},{value:"Title: Blake2b-224 in Plutus v3",id:"title-blake2b-224-in-plutus-v3",level:3},{value:"User Story",id:"user-story-2",level:3},{value:"Functional Requirements",id:"functional-requirements-2",level:3},{value:"Link:",id:"link-2",level:3},{value:"User Story ID: CIP-87",id:"user-story-id-cip-87",level:2},{value:"Title: Use bitwise operations in Plutus V3",id:"title-use-bitwise-operations-in-plutus-v3",level:3},{value:"User Story",id:"user-story-3",level:3},{value:"Functional Requirements",id:"functional-requirements-3",level:3},{value:"Link:",id:"link-3",level:3},{value:"User Story ID: CIP-XXXX",id:"user-story-id-cip-xxxx",level:2},{value:"Title: Math function to compute modular exponentiation",id:"title-math-function-to-compute-modular-exponentiation",level:3},{value:"User Story",id:"user-story-4",level:3},{value:"Functional Requirements",id:"functional-requirements-4",level:3},{value:"Link:",id:"link-4",level:3},{value:"User Story ID: CIP-XXXX",id:"user-story-id-cip-xxxx-1",level:2},{value:"Title: Built-in types, arrays and maps in Plutus Core",id:"title-built-in-types-arrays-and-maps-in-plutus-core",level:3},{value:"User Story",id:"user-story-5",level:3},{value:"Functional Requirements",id:"functional-requirements-5",level:3},{value:"Link:",id:"link-5",level:3}];function o(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",input:"input",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"personas",children:"Personas"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"ID"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"NAME"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"DESCRIPTION"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"HOLDER"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"ADA Holder"}),(0,i.jsx)(t.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DRep"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"DRep"}),(0,i.jsx)(t.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"user-story-id-cip-85",children:"User Story ID: CIP-85"}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Enabler"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"title-sums-of-products-in-plutus-v3",children:"Title: Sums-of-products in Plutus v3"}),"\n",(0,i.jsx)(t.h3,{id:"user-story",children:"User Story"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"As a DApp developer I want to use sums-of-products instead of Scott-encoding in my Plutus scripts to get better performance"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Requirements"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Acceptance Criteria"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Sums-of-products is available to use in Plutus V3 scripts and is the default way of encoding data types in Plutus Tx.",(0,i.jsx)("br",{}),"The following new term constructors are added to the Plutus Core language:1",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"t ::="}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"  ..."}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"  -- Packs the fields into a constructor value tagged with i"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"  l (constr i t...)"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"  -- Inspects the tag on t and passes its fields to the corresponding case branch"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"  l (case t t...)"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Plutus: specification updated"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Plutus: Implemented in production"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Plutus: New operations are costed"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Cardano-ledger: implementation of new ledger language including SOPs"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Benchmarking: no regressions on existing scripts"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Benchmarking: verify additional real-world examples"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"New Plutus language version supported in a release node version"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"New ledger language supported in a release node version"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"link",children:"Link:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/cardano-foundation/CIPs/tree/12c5cc59816b2fcc9daf9a77318a3ae018263367/CIP-0085",children:"https://github.com/cardano-foundation/CIPs/tree/12c5cc59816b2fcc9daf9a77318a3ae018263367/CIP-0085"})}),"\n",(0,i.jsx)(t.h2,{id:"user-story-id-cip-101",children:"User Story ID: CIP-101"}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Enabler"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"title-keccak256-in-plutus-v3",children:"Title: Keccak256 in Plutus v3"}),"\n",(0,i.jsx)(t.h3,{id:"user-story-1",children:"User Story"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["As a DApp developer I want to use the Keccak hashing function to validate ECDSA signatures formatted via the EVM standard",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"functional-requirements-1",children:"Functional Requirements"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Requirements"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Acceptance Criteria"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["The Keccak-256 primitive in CIP-87 must be available to use in Plutus V3 scripts as follows:",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"keccak_256 :: ByteString -> ByteString"}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Input is a ",(0,i.jsx)(t.code,{children:"ByteString"})," of any size",(0,i.jsx)("br",{}),"Output is 32 bytes ",(0,i.jsx)(t.code,{children:"ByteString"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The primitive should be implemented in Plutus V3"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["The Haskell implementations of the keccak builtin will be used to implement a new built-in function in Plutus Core. This should include a comprehensive set of local tests checking that the new builtin behave as expected. (including conformance and property-based testing).",(0,i.jsx)("br",{}),"We should add a comprehensive set of conformance tests for the new builtin, and all of the tests should pass."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"There should be e2e tests"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"We should provide budgeting benchmarks for the keccak256 builtin, run them, check that the results are sensible, then use them to create new entries in the cost model."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"A precise description of the semantics of the new function should be added to the Plutus Core specification."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The new builtin should be added to the Agda development in plutus-metatheory and all of the conformance tests should pass."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Add the initial keccak256 builtin to PlutusTx."})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"link-1",children:"Link:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0101",children:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0101"})}),"\n",(0,i.jsx)(t.h2,{id:"user-story-id-plt001",children:"User Story ID: PLT.001"}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Enabler"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"title-blake2b-224-in-plutus-v3",children:"Title: Blake2b-224 in Plutus v3"}),"\n",(0,i.jsx)(t.h3,{id:"user-story-2",children:"User Story"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"As a DApp developer I want to use the Blake2b-224 hashing function to compute PubKeyHash onchain"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"functional-requirements-2",children:"Functional Requirements"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Requirements"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Acceptance Criteria"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The Blake2b-224 primitive is available to use in Plutus V3 after the HF"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The primitive should be implemented in Plutus V3"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["The Haskell implementations of the blake2b-224 builtin will be used to implement a new built-in function in Plutus Core. This should include a comprehensive set of local tests checking that the new builtin behave as expected. (including conformance and property-based testing).",(0,i.jsx)("br",{}),"We should add a comprehensive set of conformance tests for the new builtin, and all of the tests should pass."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"There should be e2e tests"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"We should provide budgeting benchmarks for the blake2b-224 builtin, run them, check that the results are sensible, then use them to create new entries in the cost model."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"A precise description of the semantics of the new function should be added to the Plutus Core specification."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The new builtin should be added to the Agda development in plutus-metatheory and all of the conformance tests should pass."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Add the initial blake2b-224 builtin to PlutusTx."})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"link-2",children:"Link:"}),"\n",(0,i.jsx)(t.h2,{id:"user-story-id-cip-87",children:"User Story ID: CIP-87"}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Enabler"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"title-use-bitwise-operations-in-plutus-v3",children:"Title: Use bitwise operations in Plutus V3"}),"\n",(0,i.jsx)(t.h3,{id:"user-story-3",children:"User Story"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"As a DApp developer I want to use bitwise operations So that I can work with data bytestrings in a more granular and optimized way and perform operations at the bit level"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"functional-requirements-3",children:"Functional Requirements"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Requirements"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Acceptance Criteria"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["The following operations MUST be available to use in Plutus V3 after the HF:",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"integerToByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"byteStringToInteger"})," ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"The following operations WILL be available in future versions",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"andByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"iorByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"xorByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"complementByteString"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"shiftByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"rotateByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"popCountByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"testBitByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"writeBitByteString"})," ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"findFirstSetByteString"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The primitives should be implemented in Plutus V3 for the initial set of bitwise builtins"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["The Haskell implementations of the initial set of bitwise builtins will be used to implement new built-in functions in Plutus Core. This should include a comprehensive set of local tests checking that the new builtins behave as expected. (including conformance and property-based testing).",(0,i.jsx)("br",{}),"We should add a comprehensive set of conformance tests for the new builtins, and all of the tests should pass."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"There should be e2e tests for each primitive"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"We should provide budgeting benchmarks for the initial set of bitwise builtins, run them, check that the results are sensible, then use them to create new entries in the cost model."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"A precise description of the semantics of the new functions should be added to the Plutus Core specification."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The new builtins should be added to the Agda development in plutus-metatheory and all of the conformance tests should pass."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Add the initial bitwise builtins to PlutusTx."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The new primitives must execute in a reasonable time and should provide a clear advantage over alternatives implemented using existing Plutus Core features."}),(0,i.jsx)(t.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"link-3",children:"Link:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/cardano-foundation/CIPs/blob/12c5cc59816b2fcc9daf9a77318a3ae018263367/CIP-XXXX/README.md",children:"https://github.com/cardano-foundation/CIPs/blob/12c5cc59816b2fcc9daf9a77318a3ae018263367/CIP-XXXX/README.md"})}),"\n",(0,i.jsx)(t.h2,{id:"user-story-id-cip-xxxx",children:"User Story ID: CIP-XXXX"}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Enabler"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"title-math-function-to-compute-modular-exponentiation",children:"Title: Math function to compute modular exponentiation"}),"\n",(0,i.jsx)(t.h3,{id:"user-story-4",children:"User Story"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"As a dApp developer I want to use built-in modular exponentiation so that I have a more efficient and reliable mean to perform operations for multiplicative inversion"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"functional-requirements-4",children:"Functional Requirements"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Requirements"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Acceptance Criteria"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["The built-in function is expressed as follows:",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"modularExponentiation :: Integer -> Integer -> Integer -> Integer"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Fails if the modulus is not an Integer&"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Fails if the inverse of the base does not exist for a negative exponent"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Low level implementation uses integerPowMod from the GHC-bignum C package"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Reduces transactions costs"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Uphold integrity of existing  cryptographic interfaces"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"}}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Enhance cryptographic capabilities of Plutus platform"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"link-4",children:"Link:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/cardano-foundation/CIPs/pull/641",children:"https://github.com/cardano-foundation/CIPs/pull/641"})}),"\n",(0,i.jsx)(t.h2,{id:"user-story-id-cip-xxxx-1",children:"User Story ID: CIP-XXXX"}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Enabler"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"title-built-in-types-arrays-and-maps-in-plutus-core",children:"Title: Built-in types, arrays and maps in Plutus Core"}),"\n",(0,i.jsx)(t.h3,{id:"user-story-5",children:"User Story"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"As a dApp developer I want to be able to use built-in types and function arrays and map in Plutus scripts"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"functional-requirements-5",children:"Functional Requirements"}),"\n",(0,i.jsx)(t.table,{children:(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Requirements"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Acceptance Criteria"})]})})}),"\n",(0,i.jsx)(t.h3,{id:"link-5",children:"Link:"})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>d});var i=s(6540);const l={},n=i.createContext(l);function r(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);